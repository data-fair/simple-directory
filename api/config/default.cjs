module.exports = {
  port: 8080,
  mongo: {
    url: 'mongodb://mongo:27017/simple-directory-' + (process.env.NODE_ENV || 'development'),
    options: {}
  },
  publicUrl: 'http://localhost:8080',
  kid: 'sd',
  secret: { // DEPRECATED parameters, kept to transition to mongodb storage
    public: './security/simple-directory.key.pub',
    private: './security/simple-directory.key'
  },
  jwtDurations: {
    initialToken: '15m',
    exchangedToken: '30d',
    invitationToken: '10d',
    partnerInvitationToken: '10d',
    '2FAToken': '30d'
  },
  admins: ['admin@test.com'],
  adminsOrg: undefined,
  admins2FA: false,
  // special case where a email/password is defined at config level for a superadmin
  // useful when superadmins cannot be created in the storage (on-premise ldap with heavy constraints ?)
  // or to test stuff while email sending is not working yet, etc
  adminCredentials: undefined,
  roles: {
    defaults: ['admin', 'user']
  },
  contact: undefined,
  anonymousContactForm: false,
  anonymousAction: {
    expiresIn: '1d',
    notBefore: '8s'
  },
  homePage: undefined,
  storage: {
    // One of 'file', 'mongo' and 'ldap'
    type: 'mongo',
    file: {
      users: './data/users.json',
      organizations: './data/organizations.json'
    },
    mongo: {
      readonly: false
    },
    ldap: {
      url: 'ldap://ldap:389',
      searchUserDN: 'cn=admin,dc=example,dc=org',
      searchUserPassword: '',
      baseDN: 'dc=example,dc=org',
      readonly: true,
      // support storing overwritten properties in mongodb
      overwrite: ['members', 'departments'],
      cacheMS: 1000 * 60 * 5, // 5 minutes
      // map entities in ldap to SD users
      users: {
        objectClass: 'inetOrgPerson',
        dnKey: 'cn',
        mapping: {
          id: 'cn',
          name: 'cn', // TODO: better to use userName ?
          email: 'mail',
          firstName: 'givenName',
          lastName: 'sn',
          // birthday: '',
          // avatarUrl: ''
        },
        // an array of objects that can be used to overwrite any user properties based on matching "email" property
        overwrite: [],
        // an array of string filters to add to the filters generated by our ldap storage
        extraFilters: []
      },
      // map entities in ldap to SD organizations
      organizations: {
        // a single static organization, all users are in it
        // {id: ..., name: ...}
        staticSingleOrg: undefined,
        objectClass: 'organization',
        dnKey: 'dc',
        mapping: {
          id: 'dc',
          name: 'o'
        },
        // an array of objects that can be used to overwrite any org properties based on matching "id" property
        overwrite: [],
        // an array of string filters to add to the filters generated dy our ldap storage
        extraFilters: []
      },
      // manage the link between users and organizations
      members: {
        // organizations arr the parent DC of their users
        organizationAsDC: true,
        // only list users/members with a known role
        onlyWithRole: false,
        role: {
          attr: 'employeeType',
          /* values: {
            admin: ['administrator'],
            user: []
          }, */
          values: {},
          default: 'user'
        },
        // an array of objects that can be used to overwrite member role based on matching "orgId" and "email" properties
        // leave orgId empty to overwrite role for all organizations of the user
        overwrite: []
      }
    }
  },
  info: {
    termsOfService: 'https://koumoul.com/term-of-service',
    contact: {
      name: 'Koumoul',
      url: 'https://koumoul.com',
      email: 'support@koumoul.com'
    }
  },
  webhooks: {
    identities: []
  },
  analytics: {}, // a "modules" definition for @koumoul/vue-multianalytics
  theme: {
    logo: undefined,
    colors: {
      // standard vuetify colors
      background: '#FFFFFF',
      surface: '#FFFFFF',
      primary: '#1E88E5', // blue.darken1
      secondary: '#42A5F5', // blue.lighten1,
      accent: '#FF9800', // orange.base
      error: 'FF5252', // red.accent2
      info: '#2196F3', // blue.base
      success: '#4CAF50', // green.base
      warning: '#E91E63', // pink.base
      admin: '#E53935' // red.darken1
    }
  },
  i18n: {
    defaultLocale: 'fr',
    locales: ['fr', 'en', 'es', 'pt', 'it', 'de']
  },
  mails: {
    from: 'no-reply@test.com',
    // transport is a full configuration object for createTransport of nodemailer
    // cf https://nodemailer.com/smtp/
    transport: {
      port: 1025,
      ignoreTLS: true,
      host: 'localhost'
    },
    extraParams: {}
  },
  maildev: {
    url: 'http://localhost:1080',
    active: false,
    smtp: 1025,
    web: 1080
  },
  quotas: {
    defaultMaxCreatedOrgs: -1,
    defaultMaxNbMembers: 0
  },
  // Restricts who can use the find endpoints on users and organizations
  // One of 'anonymous', 'authenticated' or 'admin'
  listEntitiesMode: 'authenticated',
  listUsersMode: undefined, // same as listEntitiesMode but only for users
  listOrganizationsMode: undefined, // same as listEntitiesMode but only for users
  // Users can not be created at first email sent. They must be invited in an organization.
  // also they will not be able to log with personal account
  // and if removed from their last organization they will be deleted
  onlyCreateInvited: false,
  // prevent inviting a user in multiple departments of the same organization
  singleMembership: false,
  // users cannot delete their own account by default
  userSelfDelete: false,
  // Default redirection after login. If not specified user will go to his profile page.
  defaultLoginRedirect: undefined,
  // Redirect after successful invitation to an organization.
  // If not specified user will go to a dedicated page on simple-directory.
  invitationRedirect: undefined,
  // secrets that can be used to configure global webhooks for example to send emails to users
  secretKeys: {
    sendMails: undefined,
    limits: undefined,
    readAll: undefined,
    metrics: undefined,
    notifications: undefined,
    sites: undefined
  },
  // A link to the terms of services for the site
  tosUrl: undefined,
  manageDepartments: false,
  manageDepartmentLabel: false,
  passwordless: true,
  authRateLimit: {
    attempts: 5,
    duration: 60
  },
  // Example of full oauth provider configuration
  // oauth: {providers: [{
  //   id: 'github',
  //   icon: 'mdi-github',
  //   title: 'GitHub',
  //   color: '#4078c0',
  //   scope: 'user:email'
  //   client: {
  //     id: '...',
  //     secret: '...'
  //   },
  //   auth: {
  //     tokenHost: 'https://github.com',
  //     tokenPath: '/login/oauth/access_token',
  //     authorizePath: '/login/oauth/authorize'
  //   }
  // }]}
  oauth: {
    providers: [],
    github: {
      id: '',
      secret: ''
    },
    facebook: {
      id: '',
      secret: ''
    },
    google: {
      id: '',
      secret: ''
    },
    linkedin: {
      id: '',
      secret: ''
    }
  },
  saml2: {
    // certsDirectory: './security/saml2',
    // Accepts all samlify options for service providers https://samlify.js.org/#/sp-configuration
    sp: {},
    // providers have the usual title/color/icon/img attributes and all extra options accepted by samlify
    // for identify provider https://samlify.js.org/#/idp-configuration
    providers: []
  },
  oidc: {
    providers: []
  },
  noBirthday: false,
  avatars: {
    users: true,
    orgs: true
  },
  // allow configuring external storages per organization
  perOrgStorageTypes: [],
  cipherPassword: undefined,
  notifyUrl: undefined,
  privateNotifyUrl: undefined,
  plannedDeletionDelay: 14,
  cleanup: {
    cron: '0 5 * * *',
    deleteInactive: false,
    deleteInactiveDelay: [3, 'years']
  },
  alwaysAcceptInvitation: false,
  observer: {
    active: true
  },
  // temporary option to prevent some regression
  depAdminIsOrgAdmin: false,
  manageSites: false,
  managePartners: false,
  defaultOrg: undefined,
  serveUi: true
}
